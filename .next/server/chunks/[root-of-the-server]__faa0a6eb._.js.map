{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ADMIN/Desktop/workspace/boyalonetech/src/app/api/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// GET - Fetch all projects with pinned projects first\r\nexport async function GET() {\r\n  try {\r\n    const { data: projects, error: fetchError } = await supabase\r\n      .from(\"projects\")\r\n      .select(\"*\")\r\n      .order(\"pinned\", { ascending: false }) // Pinned projects first\r\n      .order(\"created_at\", { ascending: false }); // Then by creation date\r\n\r\n    if (fetchError) {\r\n      console.error(\"Supabase fetch error:\", fetchError);\r\n      return NextResponse.json(\r\n        { success: false, error: fetchError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      projects: projects.map((project) => ({\r\n        id: project.id,\r\n        title: project.title,\r\n        description: project.description,\r\n        demoLink: project.demo_link,\r\n        image: project.image_url,\r\n        pinned: project.pinned || false,\r\n        createdAt: project.created_at,\r\n        updatedAt: project.updated_at,\r\n      })),\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in GET handler:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Create a new project\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { title, description, demoLink, imageUrl, pinned = false } = body;\r\n\r\n    if (!title || !description || !demoLink) {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: \"Title, description, and demo link are required\",\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { data, error: insertError } = await supabase\r\n      .from(\"projects\")\r\n      .insert([\r\n        {\r\n          title,\r\n          description,\r\n          demo_link: demoLink,\r\n          image_url: imageUrl || null,\r\n          pinned: pinned,\r\n        },\r\n      ])\r\n      .select();\r\n\r\n    if (insertError) {\r\n      console.error(\"Supabase insert error:\", insertError);\r\n      return NextResponse.json(\r\n        { success: false, error: insertError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      project: {\r\n        id: data[0].id,\r\n        title: data[0].title,\r\n        description: data[0].description,\r\n        demoLink: data[0].demo_link,\r\n        image: data[0].image_url,\r\n        pinned: data[0].pinned || false,\r\n        createdAt: data[0].created_at,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in POST handler:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Define a proper interface for update data\r\ninterface UpdateData {\r\n  updated_at: string;\r\n  title?: string;\r\n  description?: string;\r\n  demo_link?: string;\r\n  image_url?: string | null;\r\n  pinned?: boolean;\r\n}\r\n\r\n// PATCH - Update project (full update support)\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { id, title, description, demoLink, imageUrl, pinned } = body;\r\n\r\n    console.log(\"PATCH request received:\", {\r\n      id,\r\n      title,\r\n      description,\r\n      demoLink,\r\n      imageUrl,\r\n      pinned,\r\n    });\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Project ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Build update object with only provided fields\r\n    const updateData: UpdateData = {\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Only include fields that are provided (not undefined)\r\n    if (title !== undefined) updateData.title = title;\r\n    if (description !== undefined) updateData.description = description;\r\n    if (demoLink !== undefined) updateData.demo_link = demoLink;\r\n\r\n    // Handle imageUrl specifically - only update if provided (could be null or string)\r\n    if (imageUrl !== undefined) {\r\n      updateData.image_url = imageUrl; // This can be null to remove image, or a new URL\r\n    }\r\n\r\n    // Handle pinned status with validation\r\n    if (pinned !== undefined) {\r\n      // Check if we're trying to pin more than 6 projects\r\n      if (pinned === true) {\r\n        const { count, error: countError } = await supabase\r\n          .from(\"projects\")\r\n          .select(\"*\", { count: \"exact\", head: true })\r\n          .eq(\"pinned\", true);\r\n\r\n        if (countError) {\r\n          console.error(\"Count error:\", countError);\r\n          return NextResponse.json(\r\n            { success: false, error: countError.message },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        // Don't count the current project if it's already pinned\r\n        const { data: currentProject, error: currentProjectError } =\r\n          await supabase\r\n            .from(\"projects\")\r\n            .select(\"pinned\")\r\n            .eq(\"id\", id)\r\n            .single();\r\n\r\n        if (currentProjectError) {\r\n          console.error(\"Current project fetch error:\", currentProjectError);\r\n          return NextResponse.json(\r\n            { success: false, error: currentProjectError.message },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        const safeCount = count ?? 0;\r\n        const currentPinnedCount = currentProject?.pinned\r\n          ? safeCount - 1\r\n          : safeCount;\r\n\r\n        if (currentPinnedCount >= 100) {\r\n          return NextResponse.json(\r\n            { success: false, error: \"Maximum of 6 projects can be pinned\" },\r\n            { status: 400 }\r\n          );\r\n        }\r\n      }\r\n      updateData.pinned = pinned;\r\n    }\r\n\r\n    console.log(\"Updating project with data:\", updateData);\r\n\r\n    const { data, error: updateError } = await supabase\r\n      .from(\"projects\")\r\n      .update(updateData)\r\n      .eq(\"id\", id)\r\n      .select();\r\n\r\n    if (updateError) {\r\n      console.error(\"Supabase update error:\", updateError);\r\n      return NextResponse.json(\r\n        { success: false, error: updateError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (!data || data.length === 0) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Project not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const updatedProject = data[0];\r\n    console.log(\"Project updated successfully:\", updatedProject);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      project: {\r\n        id: updatedProject.id,\r\n        title: updatedProject.title,\r\n        description: updatedProject.description,\r\n        demoLink: updatedProject.demo_link,\r\n        image: updatedProject.image_url,\r\n        pinned: updatedProject.pinned || false,\r\n        createdAt: updatedProject.created_at,\r\n        updatedAt: updatedProject.updated_at,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in PATCH handler:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE - Delete a project\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get(\"id\");\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Project ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { error: deleteError } = await supabase\r\n      .from(\"projects\")\r\n      .delete()\r\n      .eq(\"id\", id);\r\n\r\n    if (deleteError) {\r\n      console.error(\"Supabase delete error:\", deleteError);\r\n      return NextResponse.json(\r\n        { success: false, error: deleteError.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: \"Project deleted successfully\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in DELETE handler:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}